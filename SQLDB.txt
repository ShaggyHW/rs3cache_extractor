-- ========== TABLES ==========

CREATE TABLE abstract_teleport_edges (
    edge_id INTEGER PRIMARY KEY,
    src_x INTEGER,
    src_y INTEGER,
    src_plane INTEGER,
    dst_x INTEGER NOT NULL,
    dst_y INTEGER NOT NULL,
    dst_plane INTEGER NOT NULL,
    cost INTEGER NOT NULL,
    requirement_id INTEGER,
    src_entrance INTEGER,
    dst_entrance INTEGER.
    CONSTRAINT chk_ate_cost_nonneg CHECK (cost >= 0);
);

CREATE TABLE clusters (
    cluster_id INTEGER PRIMARY KEY,
    plane INTEGER NOT NULL,
    label INTEGER,
    tile_count INTEGER
);

CREATE TABLE cluster_entrances (
    entrance_id INTEGER PRIMARY KEY,
    cluster_id INTEGER NOT NULL REFERENCES clusters(cluster_id),
    x INTEGER NOT NULL,
    y INTEGER NOT NULL,
    plane INTEGER NOT NULL,
    neighbor_dir TEXT NOT NULL CHECK (neighbor_dir IN ('N','S','E','W')),
    teleport_edge_id INTEGER REFERENCES abstract_teleport_edges(edge_id),
    UNIQUE (cluster_id, x, y, plane, neighbor_dir)
);

CREATE TABLE cluster_interconnections (
    entrance_from INTEGER NOT NULL,
    entrance_to INTEGER NOT NULL,
    cost INTEGER NOT NULL,
    PRIMARY KEY (entrance_from, entrance_to),
    FOREIGN KEY (entrance_from) REFERENCES cluster_entrances(entrance_id),
    FOREIGN KEY (entrance_to) REFERENCES cluster_entrances(entrance_id),
    CONSTRAINT chk_cc_cost_nonneg CHECK (cost >= 0)
);

CREATE TABLE cluster_intraconnections (
    entrance_from INTEGER NOT NULL,
    entrance_to INTEGER NOT NULL,
    cost INTEGER NOT NULL,
    path_blob BLOB,
    PRIMARY KEY (entrance_from, entrance_to),
    FOREIGN KEY (entrance_from) REFERENCES cluster_entrances(entrance_id),
    FOREIGN KEY (entrance_to) REFERENCES cluster_entrances(entrance_id),
     CONSTRAINT chk_ci_cost_nonneg CHECK (cost >= 0)
);

CREATE TABLE cluster_tiles (
    cluster_id INTEGER NOT NULL REFERENCES clusters(cluster_id),
    x INTEGER NOT NULL,
    y INTEGER NOT NULL,
    plane INTEGER NOT NULL,
    PRIMARY KEY (cluster_id, x, y, plane)
);

CREATE TABLE jps_jump (
    x INTEGER NOT NULL,
    y INTEGER NOT NULL,
    plane INTEGER NOT NULL,
    dir INTEGER NOT NULL,
    next_x INTEGER,
    next_y INTEGER,
    forced_mask INTEGER,
    PRIMARY KEY (x, y, plane, dir)
);

CREATE TABLE jps_spans (
    x INTEGER NOT NULL,
    y INTEGER NOT NULL,
    plane INTEGER NOT NULL,
    left_block_at INTEGER,
    right_block_at INTEGER,
    up_block_at INTEGER,
    down_block_at INTEGER,
    PRIMARY KEY (x, y, plane)
);

CREATE TABLE meta (
    key TEXT PRIMARY KEY,
    value TEXT NOT NULL
);

CREATE TABLE movement_policy (
    policy_id INTEGER PRIMARY KEY CHECK (policy_id = 1),
    allow_diagonals INTEGER NOT NULL,
    allow_corner_cut INTEGER NOT NULL,
    unit_radius_tiles INTEGER NOT NULL
);

CREATE TABLE teleports_door_nodes (
    id INTEGER PRIMARY KEY,
    direction TEXT,
    real_id_open INTEGER,
    real_id_closed INTEGER,
    location_open_x INTEGER,
    location_open_y INTEGER,
    location_open_plane INTEGER,
    location_closed_x INTEGER,
    location_closed_y INTEGER,
    location_closed_plane INTEGER,
    tile_inside_x INTEGER,
    tile_inside_y INTEGER,
    tile_inside_plane INTEGER,
    tile_outside_x INTEGER,
    tile_outside_y INTEGER,
    tile_outside_plane INTEGER,
    open_action TEXT,
    cost INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_ifslot_nodes (
    id INTEGER PRIMARY KEY,
    interface_id INTEGER,
    component_id INTEGER,
    slot_id INTEGER,
    click_id INTEGER,
    dest_min_x INTEGER,
    dest_max_x INTEGER,
    dest_min_y INTEGER,
    dest_max_y INTEGER,
    dest_plane INTEGER,
    cost INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_item_nodes (
    id INTEGER PRIMARY KEY,
    item_id INTEGER,
    action TEXT,
    dest_min_x INTEGER,
    dest_max_x INTEGER,
    dest_min_y INTEGER,
    dest_max_y INTEGER,
    dest_plane INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    cost INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_lodestone_nodes (
    id INTEGER PRIMARY KEY,
    lodestone TEXT,
    dest_x INTEGER,
    dest_y INTEGER,
    dest_plane INTEGER,
    cost INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_npc_nodes (
    id INTEGER PRIMARY KEY,
    match_type TEXT,
    npc_id INTEGER,
    npc_name TEXT,
    action TEXT,
    dest_min_x INTEGER,
    dest_max_x INTEGER,
    dest_min_y INTEGER,
    dest_max_y INTEGER,
    dest_plane INTEGER,
    search_radius INTEGER,
    cost INTEGER,
    orig_min_x INTEGER,
    orig_max_x INTEGER,
    orig_min_y INTEGER,
    orig_max_y INTEGER,
    orig_plane INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_object_nodes (
    id INTEGER PRIMARY KEY,
    match_type TEXT,
    object_id INTEGER,
    object_name TEXT,
    action TEXT,
    dest_min_x INTEGER,
    dest_max_x INTEGER,
    dest_min_y INTEGER,
    dest_max_y INTEGER,
    dest_plane INTEGER,
    orig_min_x INTEGER,
    orig_max_x INTEGER,
    orig_min_y INTEGER,
    orig_max_y INTEGER,
    orig_plane INTEGER,
    search_radius INTEGER,
    cost INTEGER,
    next_node_type TEXT,
    next_node_id INTEGER,
    requirement_id INTEGER
);

CREATE TABLE teleports_requirements (
    id INTEGER PRIMARY KEY,
    metaInfo TEXT,
    key TEXT,
    value TEXT,
    comparison TEXT
);

CREATE TABLE tiles (
    x INTEGER,
    y INTEGER,
    plane INTEGER,
    flag INTEGER,
    blocked INTEGER,
    walk_mask INTEGER,
    blocked_mask INTEGER,
    walk_data TEXT,
    PRIMARY KEY (x, y, plane)
);

-- ========== INDEXES ==========

CREATE INDEX idx_abstract_teleport_dst
    ON abstract_teleport_edges(dst_plane, dst_x, dst_y);

CREATE INDEX idx_abstract_teleport_src
    ON abstract_teleport_edges(src_plane, src_x, src_y);

CREATE INDEX idx_cluster_entrances_plane_xy
    ON cluster_entrances(plane, x, y);

CREATE INDEX idx_cluster_inter_to
    ON cluster_interconnections(entrance_to);

-- updated to reflect new key for cluster_intraconnections
CREATE INDEX idx_cluster_intra_from_to
    ON cluster_intraconnections(entrance_from, entrance_to);

-- removed: idx_tiles_chunk / idx_tiles_chunk_boundary (chunk-based)
CREATE INDEX idx_tiles_walkable
    ON tiles(x, y, plane)
    WHERE blocked = 0;

CREATE INDEX idx_tiles_xyplane
    ON tiles(x, y, plane);

CREATE INDEX IF NOT EXISTS idx_cluster_tiles_xyplane
  ON cluster_tiles(plane, x, y);

CREATE INDEX IF NOT EXISTS idx_cluster_entrances_cluster_dir
  ON cluster_entrances(cluster_id, neighbor_dir);


CREATE INDEX IF NOT EXISTS idx_teleport_req_all
  ON teleports_requirements(id); -- lookup by id
CREATE INDEX IF NOT EXISTS idx_ate_requirement
  ON abstract_teleport_edges(requirement_id);
CREATE INDEX IF NOT EXISTS idx_tdoor_req ON teleports_door_nodes(requirement_id);
CREATE INDEX IF NOT EXISTS idx_tnpc_req  ON teleports_npc_nodes(requirement_id);
CREATE INDEX IF NOT EXISTS idx_tobj_req  ON teleports_object_nodes(requirement_id);
CREATE INDEX IF NOT EXISTS idx_titem_req ON teleports_item_nodes(requirement_id);
CREATE INDEX IF NOT EXISTS idx_tif_req   ON teleports_ifslot_nodes(requirement_id);
CREATE INDEX IF NOT EXISTS idx_tlode_req ON teleports_lodestone_nodes(requirement_id);

-- ========== VIEW ==========

CREATE VIEW teleports_all AS
SELECT 'door' AS kind, id,
       tile_outside_x AS src_x, tile_outside_y AS src_y, tile_outside_plane AS src_plane,
       tile_inside_x AS dst_x, tile_inside_y AS dst_y, tile_inside_plane AS dst_plane,
       cost, requirement_id
FROM teleports_door_nodes
UNION ALL
SELECT 'lodestone', id, NULL, NULL, NULL,
       dest_x, dest_y, dest_plane, cost, requirement_id
FROM teleports_lodestone_nodes
UNION ALL
SELECT 'npc', id, orig_min_x, orig_min_y, orig_plane,
       dest_min_x, dest_min_y, dest_plane, cost, requirement_id
FROM teleports_npc_nodes
UNION ALL
SELECT 'object', id, orig_min_x, orig_min_y, orig_plane,
       dest_min_x, dest_min_y, dest_plane, cost, requirement_id
FROM teleports_object_nodes
UNION ALL
SELECT 'item', id, dest_min_x, dest_min_y, dest_plane,
       dest_min_x, dest_min_y, dest_plane, cost, requirement_id
FROM teleports_item_nodes
UNION ALL
SELECT 'ifslot', id, NULL, NULL, NULL,
       CAST(dest_min_x AS INTEGER), CAST(dest_min_y AS INTEGER),
       CAST(dest_plane AS INTEGER), cost, requirement_id
FROM teleports_ifslot_nodes
WHERE dest_min_x IS NOT NULL;
